# -*- coding: utf-8 -*- 

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import cv2
import math

names = ['p']
num_class = 1
num_joints = 17

edges = [	#[0, 1], [0, 2], [1, 3], [2, 4], 
            [5, 6], 
            [5, 7], [7, 9], [6, 8], [8, 10], 
            [5, 11], [6, 12], [11, 12], 
            [11, 13], [13, 15], [12, 14], [14, 16]]

ec = [(255, 0, 0), (0, 0, 255), (255, 0, 0), (0, 0, 255), 
            (255, 0, 0), (0, 0, 255), (255, 0, 255),
            (255, 0, 0), (255, 0, 0), (0, 0, 255), (0, 0, 255),
            (255, 0, 0), (0, 0, 255), (255, 0, 255),
            (255, 0, 0), (255, 0, 0), (0, 0, 255), (0, 0, 255)]
colors_hp = [(255, 0, 255), (255, 0, 0), (0, 0, 255), 
            (255, 0, 0), (0, 0, 255), (255, 0, 0), (0, 0, 255),
            (255, 0, 0), (0, 0, 255), (255, 0, 0), (0, 0, 255),
            (255, 0, 0), (0, 0, 255), (255, 0, 0), (0, 0, 255),
            (255, 0, 0), (0, 0, 255)]
color_list = np.array(
        [
            1.000, 1.000, 1.000,
            0.850, 0.325, 0.098,
            0.929, 0.694, 0.125,
            0.494, 0.184, 0.556,
            0.466, 0.674, 0.188,
            0.301, 0.745, 0.933,
            0.635, 0.078, 0.184,
            0.300, 0.300, 0.300,
            0.600, 0.600, 0.600,
            1.000, 0.000, 0.000,
            1.000, 0.500, 0.000,
            0.749, 0.749, 0.000,
            0.000, 1.000, 0.000,
            0.000, 0.000, 1.000,
            0.667, 0.000, 1.000,
            0.333, 0.333, 0.000,
            0.333, 0.667, 0.000,
            0.333, 1.000, 0.000,
            0.667, 0.333, 0.000,
            0.667, 0.667, 0.000,
            0.667, 1.000, 0.000,
            1.000, 0.333, 0.000,
            1.000, 0.667, 0.000,
            1.000, 1.000, 0.000,
            0.000, 0.333, 0.500,
            0.000, 0.667, 0.500,
            0.000, 1.000, 0.500,
            0.333, 0.000, 0.500,
            0.333, 0.333, 0.500,
            0.333, 0.667, 0.500,
            0.333, 1.000, 0.500,
            0.667, 0.000, 0.500,
            0.667, 0.333, 0.500,
            0.667, 0.667, 0.500,
            0.667, 1.000, 0.500,
            1.000, 0.000, 0.500,
            1.000, 0.333, 0.500,
            1.000, 0.667, 0.500,
            1.000, 1.000, 0.500,
            0.000, 0.333, 1.000,
            0.000, 0.667, 1.000,
            0.000, 1.000, 1.000,
            0.333, 0.000, 1.000,
            0.333, 0.333, 1.000,
            0.333, 0.667, 1.000,
            0.333, 1.000, 1.000,
            0.667, 0.000, 1.000,
            0.667, 0.333, 1.000,
            0.667, 0.667, 1.000,
            0.667, 1.000, 1.000,
            1.000, 0.000, 1.000,
            1.000, 0.333, 1.000,
            1.000, 0.667, 1.000,
            0.167, 0.000, 0.000,
            0.333, 0.000, 0.000,
            0.500, 0.000, 0.000,
            0.667, 0.000, 0.000,
            0.833, 0.000, 0.000,
            1.000, 0.000, 0.000,
            0.000, 0.167, 0.000,
            0.000, 0.333, 0.000,
            0.000, 0.500, 0.000,
            0.000, 0.667, 0.000,
            0.000, 0.833, 0.000,
            0.000, 1.000, 0.000,
            0.000, 0.000, 0.167,
            0.000, 0.000, 0.333,
            0.000, 0.000, 0.500,
            0.000, 0.000, 0.667,
            0.000, 0.000, 0.833,
            0.000, 0.000, 1.000,
            0.000, 0.000, 0.000,
            0.143, 0.143, 0.143,
            0.286, 0.286, 0.286,
            0.429, 0.429, 0.429,
            0.571, 0.571, 0.571,

            0.714, 0.714, 0.714,
            0.857, 0.857, 0.857,
            0.000, 0.447, 0.741,
            0.50, 0.5, 0
        ]
    ).astype(np.float32)
color_list = color_list.reshape((-1, 3)) * 255

theme = 'white'
colors = [(color_list[_]).astype(np.uint8) for _ in range(len(color_list))]
colors = np.array(colors, dtype=np.uint8).reshape(len(colors), 1, 1, 3)
if theme == 'white':
    colors = colors.reshape(-1)[::-1].reshape(len(colors), 1, 1, 3)
    colors = np.clip(colors, 0., 0.6 * 255).astype(np.uint8)
dim_scale = 1
                
def add_coco_hp( image, points, points_prob): 

    points = np.array(points, dtype=np.int32).reshape(num_joints, 2)
    points_prob = np.array(points_prob, dtype=np.float32).reshape(num_joints)

    for j in range(5,17):#   num_joints
        if points_prob[j]>0.:
            cv2.circle(image, (points[j, 0], points[j, 1]), 6, (0,128,255), -1)

